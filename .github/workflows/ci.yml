name: CI - Code Quality and Test Build

on:
  push:
    branches: [ master, main, dev ]
  pull_request:
    branches: [ master, main, dev ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        uv venv --python 3.10
        uv sync --group dev

    - name: Run Ruff (linter)
      run: |
        # uv run ruff check .

    - name: Run Ruff (formatter check)
      run: |
        uv run ruff format --check .

    - name: Lint Summary
      if: always()
      run: |
        echo "## 🔍 代码质量检查完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ruff linting 检查" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ruff formatting 检查" >> $GITHUB_STEP_SUMMARY

  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  test-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref_name == 'dev'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test docker-compose configuration
      run: |
        docker-compose config

    - name: Build Summary
      run: |
        echo "## ✅ Docker 测试构建成功" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dockerfile 构建通过" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ docker-compose 配置验证通过" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗 平台: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- ℹ️ 注意: 实际镜像推送由 docker-build.yml 处理" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        wait-for-processing: true

    - name: Security Scan Summary
      if: always()
      run: |
        echo "## 🔒 安全扫描完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Trivy 漏洞扫描执行完成" >> $GITHUB_STEP_SUMMARY
        if [ -f trivy-results.sarif ]; then
          echo "- 📊 扫描结果已生成" >> $GITHUB_STEP_SUMMARY
          # 统计发现的问题数量（如果有的话）
          if command -v jq &> /dev/null; then
            ISSUES=$(cat trivy-results.sarif | jq '.runs[0].results | length' 2>/dev/null || echo "未知")
            echo "- 🔍 发现问题数量: $ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ⚠️ 扫描结果文件未找到" >> $GITHUB_STEP_SUMMARY
        fi
